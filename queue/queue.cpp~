#include <iostream>
#include "linkedlist.h"
using namespace std;


template<class T>
long MyQueue<T>::GetSize(){
  return this->count;
}


template<class T>
boolean MyQueue<T>::isEmpty(){
	if (NULL == head)
		return true;
	return false;
}

template<class T>
void MyQueue<T>::Enqueue(T data){
  Node<T>* newNode = new Node<T>;
  newNode->setData(data);
  newNode->setNext(NULL);

	if (isEmpty()){
	  head = tail = newNode;
	}
	else{
		tail->next = newNode;
		tail = newNode;
	}
}


template<class T>
void MyQueue<T>::Dequeue(){
  int i;

  if (isEmpty()){
    cout << "Empty queue" << endl;
    return;
  }
  
  this->decrementCount();
  
  if (pos == 1){
    Node<T>* temp = head;
    
    if (NULL == head->getNext()){
      head = NULL;
      tail = NULL;
    }
    else{
      head = head->getNext();
    }

	temp->setNext(NULL);
    delete temp;
    return;
  }

  Node<T> *temp , *prev;
  temp = prev = head;
  
  for (i = 1; i <= pos-1; i++){
    prev = temp;
    temp = temp->getNext();
  }

  if (NULL == temp->getNext()){
    tail = prev;
  }

  prev->setNext(temp->getNext());
  temp->setNext(NULL);
  delete temp;
  return;    
}


int main(int argc, char* argv[]){
  MyLinkedList<int> list;
  list.Insert(1,101);
  list.Insert(2,102);
  list.Insert(3,103);
  //list.Insert(4,104);
  list.Insert(5,105);
  //list.Append(1);
  //list.Append(2);
  //list.Append(3);
  list.Insert(1, 0);
  list.Insert(2, 1);
  list.Display();
  cout << endl << "Reverse:" << endl;
  list.Reverse();
  list.Display();
  cout << "Before delete:" << endl;
  list.Remove(5);
  list.Display();
}
